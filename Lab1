#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<windows.h>

#define PI 3.14159265
#define X0 30
#define Dx 5
#define Dy 5
#define SCALE 1.05
#define scale 0.95

#define R -5
#define L 5

#define _CRT_SECURE_NO_WARNINGS

void DrawLine(int A[][3])
{
	int B[3][3] = { {A[0][0], A[0][1]} , {A[1][0], A[1][1] } };
	//B[0][0] = x0 B[0][1] = y0 B[1][0] =x1 B[1][1] =y1
	int dx = abs(B[0][0] - B[1][0]);
	int dy = abs(B[0][1] - B[1][1]);
	int sx = B[0][0] < B[1][0] ? 1 : -1;
	int sy = B[0][1] < B[1][1] ? 1 : -1;
	int err =( dx > dy?dx:-dy)/2;
	int e2 = err;
	HWND sHwnd = GetForegroundWindow();
	HDC hdc = GetDC(sHwnd);



	while (1)
	{
		SetPixel(hdc, B[0][0], B[0][1], RGB(0, 200, 200));

		if (B[0][0] == B[1][0] && B[0][1] == B[1][1]) break;
		e2 = err;
		if (e2 > -dx)
		{
			err -= dy; B[0][0] += sx;
		}

		if (e2 < dy)
		{
			err += dx; B[0][1] += sy;
		}
	}
	ReleaseDC(sHwnd, hdc);


}

void move_x(int A[3][3], int flag)
{
	int dx = flag ? Dx : -Dx;
	int B[3][3] = { {1,0,0},{0,1,0},{dx, 0, 1} };

	A[0][0] = A[0][0] * B[0][0] + A[0][1] * B[1][0] + A[0][2] * B[2][0];
	A[0][1] = A[0][0] * B[0][1] + A[0][1] * B[1][1] + A[0][2] * B[2][1];
	A[0][2] = A[0][0] * B[0][2] + A[0][1] * B[1][2] + A[0][2] * B[2][2];

	A[1][0] = A[1][0] * B[0][0] + A[1][1] * B[1][0] + A[1][2] * B[2][0];
	A[1][1] = A[1][0] * B[0][1] + A[1][1] * B[1][1] + A[1][2] * B[2][1];
	A[1][2] = A[1][0] * B[0][2] + A[1][1] * B[1][2] + A[1][2] * B[2][2];
}

void move_y(int A[3][3], int flag)
{
	int dy = flag ? -Dy : Dy;
	int B[3][3] = { {1,0,0},{0,1,0},{0, dy, 1} };

	A[0][0] = A[0][0] * B[0][0] + A[0][1] * B[1][0] + A[0][2] * B[2][0];
	A[0][1] = A[0][0] * B[0][1] + A[0][1] * B[1][1] + A[0][2] * B[2][1];
	A[0][2] = A[0][0] * B[0][2] + A[0][1] * B[1][2] + A[0][2] * B[2][2];

	A[1][0] = A[1][0] * B[0][0] + A[1][1] * B[1][0] + A[1][2] * B[2][0];
	A[1][1] = A[1][0] * B[0][1] + A[1][1] * B[1][1] + A[1][2] * B[2][1];
	A[1][2] = A[1][0] * B[0][2] + A[1][1] * B[1][2] + A[1][2] * B[2][2];
}

void Scale(int A[3][3], int flag)
{
	int x1 = round((A[0][0] + A[1][0]) / 2);
	int y1 = round((A[0][1] + A[1][1]) / 2);
	double U = flag ? SCALE : scale;
	float B[3][3] = { {U,0,0},{0,U,0},{x1-U*x1, y1-U*y1, 1} };

	A[0][0] = round(A[0][0] * B[0][0] + A[0][1] * B[1][0] + A[0][2] * B[2][0]);
	A[0][1] = round(A[0][0] * B[0][1] + A[0][1] * B[1][1] + A[0][2] * B[2][1]);
	A[0][2] = round(A[0][0] * B[0][2] + A[0][1] * B[1][2] + A[0][2] * B[2][2]);

	A[1][0] = round(A[1][0] * B[0][0] + A[1][1] * B[1][0] + A[1][2] * B[2][0]);
	A[1][1] = round(A[1][0] * B[0][1] + A[1][1] * B[1][1] + A[1][2] * B[2][1]);
	A[1][2] = round(A[1][0] * B[0][2] + A[1][1] * B[1][2] + A[1][2] * B[2][2]);
	
}
void rot(int A[][3], int flag)
{

	double x1 = (A[0][0] + A[1][0]) / 2;
	double y1 = (A[0][1] + A[1][1]) / 2;
	double U = ((flag ? R : L) * PI / 180);
	double B[3][3] = { {cos(U),sin(U),0},{-sin(U),cos(U),0},{(x1*(1-cos(U)) +y1*sin(U)),(y1*(1-cos(U)) - x1*sin(U)), 1} };

	A[0][0] = round (A [0][0] * B[0][0] + A[0][1] * B[1][0] + A[0][2] * B[2][0]);
	A[0][1] = round (A [0][0] * B[0][1] + A[0][1] * B[1][1] + A[0][2] * B[2][1]);
	A[0][2] = round (A [0][0] * B[0][2] + A[0][1] * B[1][2] + A[0][2] * B[2][2]);

	A[1][0] = round (A [1][0] * B[0][0] + A[1][1] * B[1][0] + A[1][2] * B[2][0]);
	A[1][1] = round (A [1][0] * B[0][1] + A[1][1] * B[1][1] + A[1][2] * B[2][1]);
	A[1][2] = round (A [1][0] * B[0][2] + A[1][1] * B[1][2] + A[1][2] * B[2][2]);

}; 



int main()
{
	system("chcp 1251");

	int A[2][3] = { {0, 0, 1 } , {0, 0, 1} };
	char choice ='0';

	printf("Введите X0:");		
	scanf("%d", &A[0][0] );

	printf("Введите Y0:");
	scanf("%d", &A[0][1] ) ;

	printf("Введите X1:");
	scanf("%d", &A[1][0] );

	printf("Введите Y1:");

	scanf("%d", &A[1][1] );
	A[0][0] += X0;
	A[1][0] += X0;
	system("cls");
	do 
	{
		DrawLine(A);
		choice = getchar();
		system("cls");

		switch (choice)
		{
		case '2'://Сдвиг  вниз
			move_y(A, 0);
			break;

		case '8'://Сдвиг вверх
			move_y(A, 1);
			break;

		case '6'://Сдвиг вправо 
			move_x(A, 1);
			break;

		case '4'://Сдвиг влево
			move_x(A, 0);
			break;

		case '1'://Уменьшить
			Scale(A, 0);
			break;

		case '3'://Увеличить
			Scale(A, 1);
			break;

		case '7'://Вращать влево
			rot(A, 1);
			break;

		case '9'://Вращать вправо
			rot(A, 0);
			break;

		default: break;
		}

	} while (choice != '0');
	

	return 0;
}
